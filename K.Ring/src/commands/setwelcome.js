/**
 * Commande /setwelcome
 * Configure le r√¥le attribu√© automatiquement aux nouveaux membres
 * R√©serv√©e aux administrateurs
 */

import { SlashCommandBuilder, PermissionFlagsBits } from 'discord.js';
import logger from '../utils/logger.js';
import configManager from '../utils/configManager.js';

export default {
    data: new SlashCommandBuilder()
        .setName('setwelcome')
        .setDescription('Configure le r√¥le attribu√© automatiquement aux nouveaux membres')
        .addRoleOption(option =>
            option
                .setName('role')
                .setDescription('Le r√¥le √† attribuer aux nouveaux membres (laisser vide pour d√©sactiver)')
                .setRequired(false)
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

    async execute(interaction) {
        try {
            const role = interaction.options.getRole('role');
            const guild = interaction.guild;

            // Si aucun r√¥le n'est fourni, d√©sactiver la fonctionnalit√©
            if (!role) {
                configManager.setWelcomeRole(guild.id, null);
                
                await interaction.reply({
                    content: '‚úÖ Attribution automatique de r√¥le d√©sactiv√©e.',
                    ephemeral: true
                });

                logger.info(`Attribution de r√¥le de bienvenue d√©sactiv√©e sur ${guild.name} par ${interaction.user.tag}`);
                return;
            }

            // V√©rifier que le bot peut attribuer ce r√¥le
            const botMember = guild.members.me;
            const botHighestRole = botMember.roles.highest;

            // Le r√¥le du bot doit √™tre au-dessus du r√¥le √† attribuer
            if (role.position >= botHighestRole.position) {
                return await interaction.reply({
                    content: `‚ùå Je ne peux pas attribuer le r√¥le ${role} car il est au-dessus ou au m√™me niveau que mon r√¥le le plus √©lev√©.\n\nüí° D√©placez mon r√¥le au-dessus de ${role} dans les param√®tres du serveur.`,
                    ephemeral: true
                });
            }

            // V√©rifier que le r√¥le n'est pas @everyone
            if (role.id === guild.id) {
                return await interaction.reply({
                    content: '‚ùå Vous ne pouvez pas utiliser le r√¥le @everyone.',
                    ephemeral: true
                });
            }

            // V√©rifier que le bot a la permission de g√©rer les r√¥les
            if (!botMember.permissions.has(PermissionFlagsBits.ManageRoles)) {
                return await interaction.reply({
                    content: '‚ùå Je n\'ai pas la permission de g√©rer les r√¥les. Veuillez m\'accorder cette permission.',
                    ephemeral: true
                });
            }

            // Sauvegarder la configuration
            configManager.setWelcomeRole(guild.id, role.id);

            await interaction.reply({
                content: `‚úÖ Le r√¥le ${role} sera maintenant attribu√© automatiquement aux nouveaux membres.\n\nüí° Assurez-vous que mon r√¥le reste au-dessus de ${role} dans la hi√©rarchie.`,
                ephemeral: true
            });

            logger.success(`R√¥le de bienvenue configur√© sur ${guild.name}: ${role.name} (${role.id}) par ${interaction.user.tag}`);

        } catch (error) {
            logger.error('Erreur lors de l\'ex√©cution de la commande /setwelcome', error);
            
            const errorMessage = '‚ùå Une erreur est survenue lors de la configuration du r√¥le de bienvenue.';
            
            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ content: errorMessage, ephemeral: true });
            } else {
                await interaction.reply({ content: errorMessage, ephemeral: true });
            }
        }
    }
};
