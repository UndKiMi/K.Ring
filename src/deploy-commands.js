/**
 * Script de d√©ploiement des commandes slash
 * Enregistre toutes les commandes aupr√®s de l'API Discord
 */

import { REST, Routes } from 'discord.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import config from './config/index.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const { token, clientId, guildId } = config.discord;

const commandsPath = path.join(__dirname, 'commands');

// V√©rifier si le dossier commands existe
if (!fs.existsSync(commandsPath)) {
    console.error('‚ùå Dossier commands introuvable');
    process.exit(1);
}

const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

console.log('üì¶ Chargement des commandes...\n');

// Charger toutes les commandes avec Promise.all
const commandPromises = commandFiles.map(file => {
    const filePath = path.join(commandsPath, file);
    return import(`file://${filePath}`)
        .then(command => {
            if ('data' in command.default && 'execute' in command.default) {
                console.log(`‚úÖ ${command.default.data.name} - ${command.default.data.description}`);
                return command.default.data.toJSON();
            } else {
                console.log(`‚ö†Ô∏è  ${file} - Structure invalide (manque 'data' ou 'execute')`);
                return null;
            }
        })
        .catch(error => {
            console.error(`‚ùå Erreur lors du chargement de ${file}:`, error.message);
            return null;
        });
});

// Attendre que toutes les commandes soient charg√©es
const loadedCommands = await Promise.all(commandPromises);
const commands = loadedCommands.filter(cmd => cmd !== null);

console.log(`\nüìä Total: ${commands.length} commande(s) √† d√©ployer\n`);

// Cr√©er une instance REST
const rest = new REST({ version: '10' }).setToken(token);

try {
    console.log('üöÄ D√©ploiement des commandes slash...\n');

    let data;

    if (guildId) {
        // D√©ploiement sur un serveur sp√©cifique (instantan√©, pour les tests)
        console.log(`üìç D√©ploiement sur le serveur ${guildId} (mode test)`);
        data = await rest.put(
            Routes.applicationGuildCommands(clientId, guildId),
            { body: commands }
        );
        console.log(`‚úÖ ${data.length} commande(s) d√©ploy√©e(s) sur le serveur de test`);
    } else {
        // D√©ploiement global (peut prendre jusqu'√† 1 heure)
        console.log('üåç D√©ploiement global (peut prendre jusqu\'√† 1 heure)');
        data = await rest.put(
            Routes.applicationCommands(clientId),
            { body: commands }
        );
        console.log(`‚úÖ ${data.length} commande(s) d√©ploy√©e(s) globalement`);
    }

    console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë   D√©ploiement termin√© avec succ√®s !    ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');

    console.log('üí° Commandes d√©ploy√©es:');
    data.forEach(cmd => {
        console.log(`   ‚Ä¢ /${cmd.name}`);
    });

    console.log('\nüìù Note: Si vous avez d√©ploy√© globalement, les commandes');
    console.log('   peuvent prendre jusqu\'√† 1 heure pour appara√Ætre.');
    console.log('   Pour des tests instantan√©s, utilisez GUILD_ID dans .env\n');

} catch (error) {
    console.error('\n‚ùå Erreur lors du d√©ploiement:', error);
    
    if (error.code === 50001) {
        console.error('\n‚ö†Ô∏è  Erreur: Le bot n\'a pas acc√®s au serveur sp√©cifi√©.');
        console.error('   V√©rifiez que GUILD_ID est correct et que le bot est sur le serveur.\n');
    } else if (error.code === 'TokenInvalid') {
        console.error('\n‚ö†Ô∏è  Erreur: Token Discord invalide.');
        console.error('   V√©rifiez votre DISCORD_TOKEN dans le fichier .env\n');
    }
}
