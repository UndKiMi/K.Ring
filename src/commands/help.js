/**
 * Commande /help
 * Affiche l'aide et la liste des commandes disponibles
 */

import { SlashCommandBuilder, EmbedBuilder } from 'discord.js';
import logger from '../utils/logger.js';

export default {
    data: new SlashCommandBuilder()
        .setName('help')
        .setDescription('Affiche l\'aide et la liste des commandes disponibles'),

    async execute(interaction) {
        try {
            const helpEmbed = new EmbedBuilder()
                .setColor(0x3498db)
                .setTitle('üìö K.Ring - Guide d\'utilisation')
                .setDescription('*Inspir√© d\'Alan Turing (1912-1954)*\n\nVoici toutes les commandes disponibles :')
                .setThumbnail(interaction.client.user.displayAvatarURL({ dynamic: true, size: 256 }))
                .addFields(
                    {
                        name: 'üßÆ /calc [expression]',
                        value: 'Calculatrice math√©matique avanc√©e\n‚Ä¢ Supporte les op√©rations complexes\n‚Ä¢ Grands nombres (BigNumber)\n‚Ä¢ Exemples : `2+2`, `sqrt(16)`, `factorial(20)`, `798379857389 x 58904385704`',
                        inline: false
                    },
                    {
                        name: 'üì¢ /info [sujet]',
                        value: 'Publier une information dans #infos\n‚Ä¢ Cr√©e le salon automatiquement si absent\n‚Ä¢ Embed professionnel\n‚Ä¢ Exemple : `/info R√©union demain √† 15h`',
                        inline: false
                    },
                    {
                        name: '‚öôÔ∏è /setwelcome [role]',
                        value: 'Configurer le r√¥le de bienvenue (Admin)\n‚Ä¢ Attribution automatique aux nouveaux membres\n‚Ä¢ Laisser vide pour d√©sactiver\n‚Ä¢ Exemple : `/setwelcome @Membre`',
                        inline: false
                    },
                    {
                        name: 'üìä /status',
                        value: 'Afficher les statistiques du bot\n‚Ä¢ Informations syst√®me\n‚Ä¢ Fonctionnalit√©s actives\n‚Ä¢ Configuration du serveur',
                        inline: false
                    },
                    {
                        name: '‚ùì /help',
                        value: 'Afficher ce message d\'aide',
                        inline: false
                    }
                )
                .addFields(
                    {
                        name: 'ü§ñ Fonctionnalit√©s automatiques',
                        value: [
                            '‚Ä¢ **Bienvenue** : Message automatique dans #general',
                            '‚Ä¢ **Mention** : R√©pond quand vous me mentionnez',
                            '‚Ä¢ **Daily** : Blague/conseil quotidien √† 9h dans #daily',
                            '‚Ä¢ **Anti-spam** : Protection contre les raids et le spam',
                            '‚Ä¢ **S√©curit√©** : Validation des entr√©es et rate limiting'
                        ].join('\n'),
                        inline: false
                    }
                )
                .setFooter({
                    text: `K.Ring Bot v2.0 ‚Ä¢ Demand√© par ${interaction.user.tag}`,
                    iconURL: interaction.user.displayAvatarURL({ dynamic: true })
                })
                .setTimestamp();

            await interaction.reply({ embeds: [helpEmbed], ephemeral: true });

            logger.info(`Commande /help ex√©cut√©e par ${interaction.user.tag}`);

        } catch (error) {
            logger.error('Erreur lors de l\'ex√©cution de la commande /help', error);
            
            const errorMessage = '‚ùå Une erreur est survenue lors de l\'affichage de l\'aide.';
            
            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ content: errorMessage, ephemeral: true });
            } else {
                await interaction.reply({ content: errorMessage, ephemeral: true });
            }
        }
    }
};
